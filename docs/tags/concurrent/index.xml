<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>concurrent on Daishi Kato&#39;s blog</title>
    <link>https://blog.axlight.com/tags/concurrent/</link>
    <description>Recent content in concurrent on Daishi Kato&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Jun 2021 21:00:00 +0900</lastBuildDate><atom:link href="https://blog.axlight.com/tags/concurrent/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Testing Global State Libraries With React 18 Alpha Concurrent Rendering</title>
      <link>https://blog.axlight.com/posts/testing-global-state-libraries-with-react-18-alpha-concurrent-rendering/</link>
      <pubDate>Thu, 10 Jun 2021 21:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/testing-global-state-libraries-with-react-18-alpha-concurrent-rendering/</guid>
      <description>Introduction The React team announced The Plan for React 18 with various features. Among them, concurrent rendering is one of my interests because I have been developing various global state libraries and there are known issues called &amp;ldquo;tearing&amp;rdquo; and &amp;ldquo;branching&amp;rdquo;.
Tearing is an undesirable behavior in which two components render with different values for same global state.
Branching is a desirable behavior in which a component renders with a stale value for a state in a transition update.</description>
    </item>
    
    <item>
      <title>Developing React Global State Library With Atom Abstraction</title>
      <link>https://blog.axlight.com/posts/developing-react-global-state-library-with-atom-abstraction/</link>
      <pubDate>Thu, 13 Aug 2020 08:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/developing-react-global-state-library-with-atom-abstraction/</guid>
      <description>Introduction I have been developing various global state libraries for React. For example:
react-tracked react-hooks-global-state My main motivation is to eliminate selector functions that are only required for render optimization. Render optimization here means it avoids extra re-renders. An extra re-render is a re-render process that produces the same view result as before.
Since Recoil is announced, I&amp;rsquo;m very interested in atom abstraction because it eliminates selector functions for render optimization and the API seems pretty intuitive.</description>
    </item>
    
    <item>
      <title>Diving Into React Suspense Render-as-You-Fetch for REST APIs</title>
      <link>https://blog.axlight.com/posts/diving-into-react-suspense-render-as-you-fetch-for-rest-apis/</link>
      <pubDate>Mon, 16 Dec 2019 22:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/diving-into-react-suspense-render-as-you-fetch-for-rest-apis/</guid>
      <description>Introduction React released Concurrent Mode in the experimental channel and Suspense for Data Fetching. This release is for library authors, and not for production apps yet. The new data fetching pattern proposed is called Render-as-You-Fetch.
This post mainly discuss Render-as-You-Fetch for basic fetch calls, like calling REST APIs. But, some of discussions are not limited to REST. One could invoke GraphQL endpoints with simple fetch calls. For more complex use cases with GraphQL, it&amp;rsquo;s worth looking into Relay documentation too.</description>
    </item>
    
    <item>
      <title>Developing a React Library for Suspense for Data Fetching in Concurrent Mode</title>
      <link>https://blog.axlight.com/posts/developing-a-react-library-for-suspense-for-data-fetching-in-concurrent-mode/</link>
      <pubDate>Sun, 03 Nov 2019 21:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/developing-a-react-library-for-suspense-for-data-fetching-in-concurrent-mode/</guid>
      <description>Introduction We have been waiting for &amp;ldquo;Suspense for Data Fetching&amp;rdquo; for a long time. It is now provided as an experimental feature in the experimental channel.
Check out the official docs for details.
Introducing Concurrent Mode Suspense for Data Fetching Concurrent UI Patterns Adopting Concurrent Mode Concurrent Mode API Reference They are trying best to explain new mind sets with analogies. That means it&amp;rsquo;s totally different from the usage with traditional React.</description>
    </item>
    
    <item>
      <title>How I developed a Concurrent Mode friendly library for React Redux</title>
      <link>https://blog.axlight.com/posts/how-i-developed-a-concurrent-mode-friendly-library-for-react-redux/</link>
      <pubDate>Sat, 27 Jul 2019 23:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/how-i-developed-a-concurrent-mode-friendly-library-for-react-redux/</guid>
      <description>Introduction I have been developing several React hooks libraries for months. In this post, I will explain why and how I developed a React Redux binding library with React hooks. The library is implemented to be concurrent mode friendly. Let&amp;rsquo;s discuss why it&amp;rsquo;s important and what&amp;rsquo;s the technique behind it.
React concurrent mode has not come yet, and all discussions are based on the current unstable behavior. Please note that when concurrent mode is released and best practice is researched, things may change.</description>
    </item>
    
    <item>
      <title>How to properly use the React useRef hook in Concurrent Mode</title>
      <link>https://blog.axlight.com/posts/how-to-properly-use-the-react-useref-hook-in-concurrent-mode/</link>
      <pubDate>Thu, 07 Mar 2019 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/how-to-properly-use-the-react-useref-hook-in-concurrent-mode/</guid>
      <description>Introduction According to React 16.x Roadmap, we are expecting Concurrent Mode soon.
React 16.x (~Q2 2019): The One with Concurrent Mode Concurrent Mode lets React apps be more responsive by rendering component trees without blocking the main thread. It is opt-in and allows React to interrupt a long-running render (for example, rendering a new feed story) to handle a high-priority event (for example, text input or hover). Concurrent Mode also improves the user experience of Suspense by skipping unnecessary loading states on fast connections.</description>
    </item>
    
    <item>
      <title>useFetch: React custom hook for Fetch API with Suspense and Concurrent Mode in Mind</title>
      <link>https://blog.axlight.com/posts/usefetch-react-custom-hook-for-fetch-api-with-suspense-and-concurrent-mode-in-mind/</link>
      <pubDate>Mon, 04 Feb 2019 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/usefetch-react-custom-hook-for-fetch-api-with-suspense-and-concurrent-mode-in-mind/</guid>
      <description>Introduction While I don&amp;rsquo;t feel like coding React without hooks, react-cache still seems to be still far away. Surely, caching in data fetching important, nevertheless I would like to seek possibilities of implementations only with React Hooks. These might be obsoleted in the future, but I want something today, that is &amp;ldquo;useFetch&amp;rdquo;. This could be still useful without react-cache in case sophisticated caching is not necessary.
I&amp;rsquo;ve started developing &amp;ldquo;useFetch&amp;rdquo; as a tutorial to build a custom hook.</description>
    </item>
    
  </channel>
</rss>
