<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apollo on Daishi Kato&#39;s blog</title>
    <link>https://blog.axlight.com/tags/apollo/</link>
    <description>Recent content in Apollo on Daishi Kato&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Jan 2020 23:00:00 +0900</lastBuildDate>
    <atom:link href="https://blog.axlight.com/tags/apollo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lazy Load Apollo Link in Apollo Client</title>
      <link>https://blog.axlight.com/posts/lazy-load-apollo-link-in-apollo-client/</link>
      <pubDate>Fri, 10 Jan 2020 23:00:00 +0900</pubDate>
      <guid>https://blog.axlight.com/posts/lazy-load-apollo-link-in-apollo-client/</guid>
      <description>Introduction This is a short post about my small library.&#xA;Apollo Client is a library for GraphQL. Apollo Link is an interface to extend Apollo Client.&#xA;Typically, you would initialize apollo client like this.&#xA;import { ApolloClient } from &amp;#39;apollo-client&amp;#39;; import { InMemoryCache } from &amp;#39;apollo-cache-inmemory&amp;#39;; import { HttpLink } from &amp;#39;apollo-link-http&amp;#39;; const cache = new InMemoryCache(); const link = new HttpLink({ uri }); const client = new ApolloClient({ cache: cache, link: link, }); I want to define the link in another file and lazy load it, because it is not an HttpLink but a complicated large link.</description>
    </item>
    <item>
      <title>Injecting a client-side script in GraphQL Playground in Apollo Server</title>
      <link>https://blog.axlight.com/posts/injecting-a-client-side-script-in-graphql-playground-in-apollo-server/</link>
      <pubDate>Sat, 22 Dec 2018 12:00:00 +0900</pubDate>
      <guid>https://blog.axlight.com/posts/injecting-a-client-side-script-in-graphql-playground-in-apollo-server/</guid>
      <description>This is a short article to explain how I inject a client-side script in Playground. Note that this is a workaround solution until I find a better way.&#xA;Background When developing a GraphQL server with Apollo Server, GraphQL Playground is a tool that you are likely to use. Now, suppose we have an Apollo server that authenticates with a token in an HTTP header. Luckily, Playground has an editor to specify HTTP headers.</description>
    </item>
    <item>
      <title>Creating a Minimal Expo React Native Project with TypeScript and Jest</title>
      <link>https://blog.axlight.com/posts/creating-a-minimal-expo-react-native-project-with-typescript-and-jest/</link>
      <pubDate>Sat, 01 Dec 2018 12:00:00 +0900</pubDate>
      <guid>https://blog.axlight.com/posts/creating-a-minimal-expo-react-native-project-with-typescript-and-jest/</guid>
      <description>This article shows the steps to create a minimal Expo project. The project uses TypeScript and Jest. Note that this procedure is based on Expo SDK31 and may be invalid in the future.&#xA;Install Expo CLI As described in the official doc, let&amp;rsquo;s install the CLI tool.&#xA;$ npm install -g expo-cli Note: I prefer using npx and I use npx in my project, but expo-cli depends on @expo/dev-tools which depends on old graphql.</description>
    </item>
    <item>
      <title>Clean Expo (React Native) &#43; React Apollo (GraphQL) &#43; TypeScript boilerplate</title>
      <link>https://blog.axlight.com/posts/clean-expo-react-native-react-apollo-graphql-typescript-boilerplate/</link>
      <pubDate>Sat, 20 Oct 2018 12:00:00 +0900</pubDate>
      <guid>https://blog.axlight.com/posts/clean-expo-react-native-react-apollo-graphql-typescript-boilerplate/</guid>
      <description>Motivation Have you heard of React Native, GraphQL and TypeScript? I&amp;rsquo;m looking for a easy and nice tech stack to develop mobile apps. These three may fit nicely for developing mobile apps for beginners up to intermediates. More precisely, Expo is chosen for building React Native development environment, and React Apollo is for GraphQL. These libraries comes with type annotations, which allow us to code in TypeScript. By &amp;ldquo;Clean&amp;rdquo; I mean not only the boilerplate is minimalistic, but also we don&amp;rsquo;t allow &amp;ldquo;any&amp;rdquo; types.</description>
    </item>
  </channel>
</rss>
