<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Typescript on Daishi Kato&#39;s blog</title>
    <link>https://blog.axlight.com/tags/typescript/</link>
    <description>Recent content in Typescript on Daishi Kato&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Oct 2023 11:00:00 +0900</lastBuildDate>
    <atom:link href="https://blog.axlight.com/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why useSyncExternalStore Is Not Used in Jotai</title>
      <link>https://blog.axlight.com/posts/why-use-sync-external-store-is-not-used-in-jotai/</link>
      <pubDate>Sat, 28 Oct 2023 11:00:00 +0900</pubDate>
      <guid>https://blog.axlight.com/posts/why-use-sync-external-store-is-not-used-in-jotai/</guid>
      <description>Introduction Jotai is developed to solve an extra re-render issue with React Context. A major challenge in its development has been the support of both Suspense and Concurrent rendering. Otherwise, it would have been a simpler implementation and its implementation would closely resemble that of any observable-like libraries.&#xA;As of writing, Jotai is fully compatible with Suspense and Concurrent rendering with some exceptions. There&amp;rsquo;s a repo to evaluate some details.</description>
    </item>
    <item>
      <title>Why Zustand Typescript Implementation Is So Ugly</title>
      <link>https://blog.axlight.com/posts/why-zustand-typescript-implementation-is-so-ugly/</link>
      <pubDate>Wed, 19 Jul 2023 15:00:00 +0900</pubDate>
      <guid>https://blog.axlight.com/posts/why-zustand-typescript-implementation-is-so-ugly/</guid>
      <description>Introduction Note: This post focuses on Zustand library&amp;rsquo;s implementation in TypeScript. It does not affect the user code, which should be kept clean.&#xA;Zustand&amp;rsquo;s JavaScript implementation is very small, as seen in the following tweet.&#xA;Here&amp;#39;s the Zustand code in JS in a tweet.&#xA;I think I did this before, but this is slightly a new version.&#xA;Not in 140 chars, but in an image. ðŸ˜…&#xA;Source: https://t.co/SEBiC7bObe pic.twitter.com/kLcHnMN5je&#xA;&amp;mdash; Daishi Kato (@dai_shi) October 20, 2022 However, its TypeScript implementation is quite complicated.</description>
    </item>
    <item>
      <title>Learning React State Manager Jotai With 7GUIS Tasks</title>
      <link>https://blog.axlight.com/posts/learning-react-state-manager-jotai-with-7guis-tasks/</link>
      <pubDate>Mon, 13 Sep 2021 20:23:30 +0900</pubDate>
      <guid>https://blog.axlight.com/posts/learning-react-state-manager-jotai-with-7guis-tasks/</guid>
      <description>Introduction I stumbled upon 7GUIS tasks while reading XState Tutorials. This motivated me to challenge those 7 tasks with jotai.&#xA;It turned out that this would be a good resource to learn jotai. They are from basic tasks to advanced tasked, and you will see how they are implemented, occasionally magically.&#xA;It&amp;rsquo;s recommended to try it yourself first. If you succeed to implement it, then you can compare. Even if you fail, you can read and learn.</description>
    </item>
    <item>
      <title>Steps to Develop Global State for React With Hooks Without Context</title>
      <link>https://blog.axlight.com/posts/steps-to-develop-global-state-for-react/</link>
      <pubDate>Tue, 18 Feb 2020 23:00:00 +0900</pubDate>
      <guid>https://blog.axlight.com/posts/steps-to-develop-global-state-for-react/</guid>
      <description>Introduction Developing with React hooks is fun for me. I have been developing several libraries. The very first library was a library for global state. It&amp;rsquo;s naively called &amp;ldquo;react-hooks-global-state&amp;rdquo; which turns out to be too long to read.&#xA;The initial version of the library was published in Oct 2018. Time has passed since then, I learned a lot, and now v1.0.0 of the library is published.&#xA;https://github.com/dai-shi/react-hooks-global-state&#xA;This post shows simplified versions of the code step by step.</description>
    </item>
    <item>
      <title>How to use react-tracked: React hooks-oriented Todo List example</title>
      <link>https://blog.axlight.com/posts/how-to-use-react-tracked-react-hooks-oriented-todo-list-example/</link>
      <pubDate>Mon, 08 Jul 2019 01:00:00 +0900</pubDate>
      <guid>https://blog.axlight.com/posts/how-to-use-react-tracked-react-hooks-oriented-todo-list-example/</guid>
      <description>Introduction React hooks have changed the way to compose components. This post will show an example which is very hooks-oriented.&#xA;We use two libraries: react-tracked and immer. While immer makes it easy to update state in an immutable way, react-tracked makes it easy to read state with tracking for optimization. Please check out the repo for more details.&#xA;https://github.com/dai-shi/react-tracked&#xA;The example we show is the one from Redux: Todo List</description>
    </item>
    <item>
      <title>Redux meets hooks for non-redux users: a small concrete example with reactive-react-redux</title>
      <link>https://blog.axlight.com/posts/redux-meets-hooks-for-non-redux-users-a-small-concrete-example-with-reactive-react-redux/</link>
      <pubDate>Mon, 03 Jun 2019 23:00:00 +0900</pubDate>
      <guid>https://blog.axlight.com/posts/redux-meets-hooks-for-non-redux-users-a-small-concrete-example-with-reactive-react-redux/</guid>
      <description>Introduction If you had already used Redux and loved it, you might not understand why people try using React context and hooks to replace Redux (a.k.a no Redux hype). For those who would think Redux DevTools Extension and middleware are nice to have, Redux and context + hooks are actually two options. Context + hooks is just fine to share state among components, however if apps get bigger, they are likely to require Redux or other similar solutions; otherwise they end up having many contexts that can&amp;rsquo;t be handled very easily.</description>
    </item>
    <item>
      <title>Developing React custom hooks for Redux without react-redux</title>
      <link>https://blog.axlight.com/posts/developing-react-custom-hooks-for-redux-without-react-redux/</link>
      <pubDate>Fri, 14 Dec 2018 12:00:00 +0900</pubDate>
      <guid>https://blog.axlight.com/posts/developing-react-custom-hooks-for-redux-without-react-redux/</guid>
      <description>Background Ever since I learned Redux, I&amp;rsquo;ve been thinking an alternative integration of react and redux to the official react-redux library. The intuition behind it is that Redux is super simple which I like a lot, whereas react-redux is complex because of performance tuning. If you are developing a business product, the official react-redux is to go without a doubt, but if you are playing with creating a toy app or you are just starting learning Redux, you might want something more straightforward.</description>
    </item>
    <item>
      <title>Creating a Minimal Expo React Native Project with TypeScript and Jest</title>
      <link>https://blog.axlight.com/posts/creating-a-minimal-expo-react-native-project-with-typescript-and-jest/</link>
      <pubDate>Sat, 01 Dec 2018 12:00:00 +0900</pubDate>
      <guid>https://blog.axlight.com/posts/creating-a-minimal-expo-react-native-project-with-typescript-and-jest/</guid>
      <description>This article shows the steps to create a minimal Expo project. The project uses TypeScript and Jest. Note that this procedure is based on Expo SDK31 and may be invalid in the future.&#xA;Install Expo CLI As described in the official doc, let&amp;rsquo;s install the CLI tool.&#xA;$ npm install -g expo-cli Note: I prefer using npx and I use npx in my project, but expo-cli depends on @expo/dev-tools which depends on old graphql.</description>
    </item>
    <item>
      <title>A deadly simple React bindings library for Redux with Hooks API</title>
      <link>https://blog.axlight.com/posts/a-deadly-simple-react-bindings-library-for-redux-with-hooks-api/</link>
      <pubDate>Fri, 16 Nov 2018 12:00:00 +0900</pubDate>
      <guid>https://blog.axlight.com/posts/a-deadly-simple-react-bindings-library-for-redux-with-hooks-api/</guid>
      <description>There is a follow-up article which describes the implementation details of this library. Please visit here.&#xA;Redux is one of the popular libraries for React. Although Redux itself is not tied to React, it&amp;rsquo;s often used with the official bindings react-redux that allows to connect Redux state to any React components.&#xA;In this article, we propose another bindings library to combine React and Redux. This library tries to be simple and easy for beginners.</description>
    </item>
    <item>
      <title>React Hooks Tutorial on pure useReducer &#43; useContext for global state like Redux and comparison with react-hooks-global-state</title>
      <link>https://blog.axlight.com/posts/react-hooks-tutorial-for-pure-usereducer-usecontext-for-global-state-like-redux-and-comparison/</link>
      <pubDate>Fri, 09 Nov 2018 12:00:00 +0900</pubDate>
      <guid>https://blog.axlight.com/posts/react-hooks-tutorial-for-pure-usereducer-usecontext-for-global-state-like-redux-and-comparison/</guid>
      <description>In this article, I will first explain minimal code to implement global state with useReducer and useContext which are called &amp;ldquo;hooks&amp;rdquo; that will be available in React 16.7. I will then compare it with react-hooks-global-state which is a tiny library that I&amp;rsquo;ve been developing for global state management primarily for small applications.&#xA;Note: Global state is convenient for sharing values among components far apart in the component tree, but it shouldn&amp;rsquo;t be abused because it would limit the reusability.</description>
    </item>
    <item>
      <title>Redux middleware compatible React Hooks library for easy global state management</title>
      <link>https://blog.axlight.com/posts/redux-middleware-compatible-react-hooks-library-for-easy-global-state-management/</link>
      <pubDate>Wed, 07 Nov 2018 12:00:00 +0900</pubDate>
      <guid>https://blog.axlight.com/posts/redux-middleware-compatible-react-hooks-library-for-easy-global-state-management/</guid>
      <description>The library I&amp;rsquo;ve been developing a library to make use of React Hooks API. The library is for global state mangement with the aim to use it instead of Redux, especially for smaller applications. See the repository for more information and the source code.&#xA;https://github.com/dai-shi/react-hooks-global-state&#xA;Please also check out my previous posts [1] [2].&#xA;Support for Redux middleware Originally, the library was extending useState for global state. Later, reducer is supported.</description>
    </item>
    <item>
      <title>An alternative to React Redux by React Hooks API (For both JavaScript and TypeScript)</title>
      <link>https://blog.axlight.com/posts/an-alternative-to-react-redux-by-react-hooks-api-for-both-javascript-and-typescript/</link>
      <pubDate>Sun, 04 Nov 2018 12:00:00 +0900</pubDate>
      <guid>https://blog.axlight.com/posts/an-alternative-to-react-redux-by-react-hooks-api-for-both-javascript-and-typescript/</guid>
      <description>Motivation Everyone is excited about the new React Hooks API. So am I. Having been thinking how to manage global state, the Hooks API seems promising. By the way, I like Redux a lot, but I don&amp;rsquo;t like react-redux a.k.a connect very much. It is too complicated for beginners to use it properly. For example, reselect / memoization is a hard concept to explain. My recommendation is to structure a global state so that mapStateToProps only needs to select a part of the state without any logic.</description>
    </item>
    <item>
      <title>TypeScript-aware React hooks for global state</title>
      <link>https://blog.axlight.com/posts/typescript-aware-react-hooks-for-global-state/</link>
      <pubDate>Sun, 28 Oct 2018 12:00:00 +0900</pubDate>
      <guid>https://blog.axlight.com/posts/typescript-aware-react-hooks-for-global-state/</guid>
      <description>React Hooks API is a new proposal for React v16.7. It enables writing all components as functions with full functionality. You can develop &amp;ldquo;custom hooks&amp;rdquo; to add a new functionality. Although it&amp;rsquo;s not released yet, I would like to introduce a new library to support global state. Note that it&amp;rsquo;s still an experiment.&#xA;The library It&amp;rsquo;s called &amp;ldquo;react-hooks-global-state&amp;rdquo; and is available in npm. Please also checkout the GitHub repository.&#xA;https://github.com/dai-shi/react-hooks-global-state</description>
    </item>
    <item>
      <title>Clean Expo (React Native) &#43; React Apollo (GraphQL) &#43; TypeScript boilerplate</title>
      <link>https://blog.axlight.com/posts/clean-expo-react-native-react-apollo-graphql-typescript-boilerplate/</link>
      <pubDate>Sat, 20 Oct 2018 12:00:00 +0900</pubDate>
      <guid>https://blog.axlight.com/posts/clean-expo-react-native-react-apollo-graphql-typescript-boilerplate/</guid>
      <description>Motivation Have you heard of React Native, GraphQL and TypeScript? I&amp;rsquo;m looking for a easy and nice tech stack to develop mobile apps. These three may fit nicely for developing mobile apps for beginners up to intermediates. More precisely, Expo is chosen for building React Native development environment, and React Apollo is for GraphQL. These libraries comes with type annotations, which allow us to code in TypeScript. By &amp;ldquo;Clean&amp;rdquo; I mean not only the boilerplate is minimalistic, but also we don&amp;rsquo;t allow &amp;ldquo;any&amp;rdquo; types.</description>
    </item>
  </channel>
</rss>
